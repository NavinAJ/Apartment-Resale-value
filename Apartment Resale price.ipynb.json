{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 align=\"center\">Apartment Resale value</h>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "\n",
    "#Imputers\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import sqlite3 \n",
    "\n",
    "# !pip install pandasql\n",
    "import pandasql as ps "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Reading the CSV file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train1_df = pd.read_csv('train1.csv')\n",
    "train2_df = pd.read_csv('train2.csv')\n",
    "train3_df = pd.read_csv('train3.csv')\n",
    "train4_df = pd.read_csv('building_to_mrt_distance.csv')\n",
    "test_df = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>street_name</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-03</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>2 ROOM</td>\n",
       "      <td>172</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>06 TO 10</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>250000.0</td>\n",
       "      <td>100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-03</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>2 ROOM</td>\n",
       "      <td>510</td>\n",
       "      <td>ANG MO KIO AVE 8</td>\n",
       "      <td>01 TO 05</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1980</td>\n",
       "      <td>265000.0</td>\n",
       "      <td>100001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>610</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>06 TO 10</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>315000.0</td>\n",
       "      <td>100002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-03</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>474</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>01 TO 05</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1984</td>\n",
       "      <td>320000.0</td>\n",
       "      <td>100003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-03</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>604</td>\n",
       "      <td>ANG MO KIO AVE 5</td>\n",
       "      <td>06 TO 10</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>321000.0</td>\n",
       "      <td>100004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     month        town flat_type block        street_name storey_range  \\\n",
       "0  2012-03  ANG MO KIO    2 ROOM   172   ANG MO KIO AVE 4     06 TO 10   \n",
       "1  2012-03  ANG MO KIO    2 ROOM   510   ANG MO KIO AVE 8     01 TO 05   \n",
       "2  2012-03  ANG MO KIO    3 ROOM   610   ANG MO KIO AVE 4     06 TO 10   \n",
       "3  2012-03  ANG MO KIO    3 ROOM   474  ANG MO KIO AVE 10     01 TO 05   \n",
       "4  2012-03  ANG MO KIO    3 ROOM   604   ANG MO KIO AVE 5     06 TO 10   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date  resale_price  uniqueID  \n",
       "0            45.0        Improved                 1986      250000.0    100000  \n",
       "1            44.0        Improved                 1980      265000.0    100001  \n",
       "2            68.0  New Generation                 1980      315000.0    100002  \n",
       "3            67.0  New Generation                 1984      320000.0    100003  \n",
       "4            67.0  New Generation                 1980      321000.0    100004  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train1_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>street_name</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>70</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>152203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>541</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1981</td>\n",
       "      <td>65</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>152204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>163</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>69.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>152205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>446</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1979</td>\n",
       "      <td>63</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>557</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152207</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     month        town flat_type block        street_name storey_range  \\\n",
       "0  2015-01  ANG MO KIO    3 ROOM   174   ANG MO KIO AVE 4     07 TO 09   \n",
       "1  2015-01  ANG MO KIO    3 ROOM   541  ANG MO KIO AVE 10     01 TO 03   \n",
       "2  2015-01  ANG MO KIO    3 ROOM   163   ANG MO KIO AVE 4     01 TO 03   \n",
       "3  2015-01  ANG MO KIO    3 ROOM   446  ANG MO KIO AVE 10     01 TO 03   \n",
       "4  2015-01  ANG MO KIO    3 ROOM   557  ANG MO KIO AVE 10     07 TO 09   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date  remaining_lease  \\\n",
       "0            60.0        Improved                 1986               70   \n",
       "1            68.0  New Generation                 1981               65   \n",
       "2            69.0  New Generation                 1980               64   \n",
       "3            68.0  New Generation                 1979               63   \n",
       "4            68.0  New Generation                 1980               64   \n",
       "\n",
       "   resale_price  uniqueID  \n",
       "0      255000.0    152203  \n",
       "1      275000.0    152204  \n",
       "2      285000.0    152205  \n",
       "3      290000.0    152206  \n",
       "4      290000.0    152207  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>street_name</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>2 ROOM</td>\n",
       "      <td>406</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>10 TO 12</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1979</td>\n",
       "      <td>61 years 04 months</td>\n",
       "      <td>232000.0</td>\n",
       "      <td>189356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>108</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1978</td>\n",
       "      <td>60 years 07 months</td>\n",
       "      <td>250000.0</td>\n",
       "      <td>189357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>602</td>\n",
       "      <td>ANG MO KIO AVE 5</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>62 years 05 months</td>\n",
       "      <td>262000.0</td>\n",
       "      <td>189358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>465</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>04 TO 06</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>62 years 01 month</td>\n",
       "      <td>265000.0</td>\n",
       "      <td>189359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>601</td>\n",
       "      <td>ANG MO KIO AVE 5</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>62 years 05 months</td>\n",
       "      <td>265000.0</td>\n",
       "      <td>189360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     month        town flat_type block        street_name storey_range  \\\n",
       "0  2017-01  ANG MO KIO    2 ROOM   406  ANG MO KIO AVE 10     10 TO 12   \n",
       "1  2017-01  ANG MO KIO    3 ROOM   108   ANG MO KIO AVE 4     01 TO 03   \n",
       "2  2017-01  ANG MO KIO    3 ROOM   602   ANG MO KIO AVE 5     01 TO 03   \n",
       "3  2017-01  ANG MO KIO    3 ROOM   465  ANG MO KIO AVE 10     04 TO 06   \n",
       "4  2017-01  ANG MO KIO    3 ROOM   601   ANG MO KIO AVE 5     01 TO 03   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date     remaining_lease  \\\n",
       "0            44.0        Improved                 1979  61 years 04 months   \n",
       "1            67.0  New Generation                 1978  60 years 07 months   \n",
       "2            67.0  New Generation                 1980  62 years 05 months   \n",
       "3            68.0  New Generation                 1980   62 years 01 month   \n",
       "4            67.0  New Generation                 1980  62 years 05 months   \n",
       "\n",
       "   resale_price  uniqueID  \n",
       "0      232000.0    189356  \n",
       "1      250000.0    189357  \n",
       "2      262000.0    189358  \n",
       "3      265000.0    189359  \n",
       "4      265000.0    189360  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train3_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train 1 Shape = (52203, 11)\n",
      "Train 2 Shape = (37153, 12)\n",
      "Train 3 Shape = (32578, 12)\n"
     ]
    }
   ],
   "source": [
    "print(\"Train 1 Shape =\",train1_df.shape)\n",
    "print(\"Train 2 Shape =\",train2_df.shape)\n",
    "print(\"Train 3 Shape =\",train3_df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Calculating the remaining lease year for dataframe 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CalculateRemaingLease(date):\n",
    "    splitDate = date.split(\" \")\n",
    "    size = len(splitDate)\n",
    "    finalYear = int(splitDate[0])\n",
    "    if(size>2):\n",
    "        month = int(splitDate[2])\n",
    "        if(month>8):\n",
    "            finalYear = finalYear+1\n",
    "    return finalYear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train3_df['remaining_lease'] = train3_df.remaining_lease.apply(CalculateRemaingLease)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>street_name</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>2 ROOM</td>\n",
       "      <td>406</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>10 TO 12</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1979</td>\n",
       "      <td>61</td>\n",
       "      <td>232000.0</td>\n",
       "      <td>189356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>108</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1978</td>\n",
       "      <td>60</td>\n",
       "      <td>250000.0</td>\n",
       "      <td>189357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>602</td>\n",
       "      <td>ANG MO KIO AVE 5</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>62</td>\n",
       "      <td>262000.0</td>\n",
       "      <td>189358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>465</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>04 TO 06</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>62</td>\n",
       "      <td>265000.0</td>\n",
       "      <td>189359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>601</td>\n",
       "      <td>ANG MO KIO AVE 5</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>62</td>\n",
       "      <td>265000.0</td>\n",
       "      <td>189360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     month        town flat_type block        street_name storey_range  \\\n",
       "0  2017-01  ANG MO KIO    2 ROOM   406  ANG MO KIO AVE 10     10 TO 12   \n",
       "1  2017-01  ANG MO KIO    3 ROOM   108   ANG MO KIO AVE 4     01 TO 03   \n",
       "2  2017-01  ANG MO KIO    3 ROOM   602   ANG MO KIO AVE 5     01 TO 03   \n",
       "3  2017-01  ANG MO KIO    3 ROOM   465  ANG MO KIO AVE 10     04 TO 06   \n",
       "4  2017-01  ANG MO KIO    3 ROOM   601   ANG MO KIO AVE 5     01 TO 03   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date  remaining_lease  \\\n",
       "0            44.0        Improved                 1979               61   \n",
       "1            67.0  New Generation                 1978               60   \n",
       "2            67.0  New Generation                 1980               62   \n",
       "3            68.0  New Generation                 1980               62   \n",
       "4            67.0  New Generation                 1980               62   \n",
       "\n",
       "   resale_price  uniqueID  \n",
       "0      232000.0    189356  \n",
       "1      250000.0    189357  \n",
       "2      262000.0    189358  \n",
       "3      265000.0    189359  \n",
       "4      265000.0    189360  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train3_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_Merge_df = pd.concat([train2_df,train3_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_Merge_df = pd.concat([train_Merge_df,train1_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(121934, 12)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>street_name</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>70.0</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>152203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>541</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1981</td>\n",
       "      <td>65.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>152204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>163</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>69.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>152205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>446</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1979</td>\n",
       "      <td>63.0</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>557</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64.0</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>603</td>\n",
       "      <td>ANG MO KIO AVE 5</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64.0</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>709</td>\n",
       "      <td>ANG MO KIO AVE 8</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64.0</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>333</td>\n",
       "      <td>ANG MO KIO AVE 1</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1981</td>\n",
       "      <td>65.0</td>\n",
       "      <td>293000.0</td>\n",
       "      <td>152210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>109</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>67.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1978</td>\n",
       "      <td>62.0</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>152211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2015-01</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>564</td>\n",
       "      <td>ANG MO KIO AVE 3</td>\n",
       "      <td>13 TO 15</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1985</td>\n",
       "      <td>69.0</td>\n",
       "      <td>307500.0</td>\n",
       "      <td>152212</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     month        town flat_type block        street_name storey_range  \\\n",
       "0  2015-01  ANG MO KIO    3 ROOM   174   ANG MO KIO AVE 4     07 TO 09   \n",
       "1  2015-01  ANG MO KIO    3 ROOM   541  ANG MO KIO AVE 10     01 TO 03   \n",
       "2  2015-01  ANG MO KIO    3 ROOM   163   ANG MO KIO AVE 4     01 TO 03   \n",
       "3  2015-01  ANG MO KIO    3 ROOM   446  ANG MO KIO AVE 10     01 TO 03   \n",
       "4  2015-01  ANG MO KIO    3 ROOM   557  ANG MO KIO AVE 10     07 TO 09   \n",
       "5  2015-01  ANG MO KIO    3 ROOM   603   ANG MO KIO AVE 5     07 TO 09   \n",
       "6  2015-01  ANG MO KIO    3 ROOM   709   ANG MO KIO AVE 8     01 TO 03   \n",
       "7  2015-01  ANG MO KIO    3 ROOM   333   ANG MO KIO AVE 1     01 TO 03   \n",
       "8  2015-01  ANG MO KIO    3 ROOM   109   ANG MO KIO AVE 4     01 TO 03   \n",
       "9  2015-01  ANG MO KIO    3 ROOM   564   ANG MO KIO AVE 3     13 TO 15   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date  remaining_lease  \\\n",
       "0            60.0        Improved                 1986             70.0   \n",
       "1            68.0  New Generation                 1981             65.0   \n",
       "2            69.0  New Generation                 1980             64.0   \n",
       "3            68.0  New Generation                 1979             63.0   \n",
       "4            68.0  New Generation                 1980             64.0   \n",
       "5            67.0  New Generation                 1980             64.0   \n",
       "6            68.0  New Generation                 1980             64.0   \n",
       "7            68.0  New Generation                 1981             65.0   \n",
       "8            67.0  New Generation                 1978             62.0   \n",
       "9            68.0  New Generation                 1985             69.0   \n",
       "\n",
       "   resale_price  uniqueID  \n",
       "0      255000.0    152203  \n",
       "1      275000.0    152204  \n",
       "2      285000.0    152205  \n",
       "3      290000.0    152206  \n",
       "4      290000.0    152207  \n",
       "5      290000.0    152208  \n",
       "6      290000.0    152209  \n",
       "7      293000.0    152210  \n",
       "8      300000.0    152211  \n",
       "9      307500.0    152212  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetCurrentYear(month):\n",
    "    splitmonth = month.split(\"-\")\n",
    "    size = len(splitmonth)\n",
    "    finalYear = int(splitmonth[0])\n",
    "    if(size>1):\n",
    "        month = int(splitmonth[1])\n",
    "        if(month>8):\n",
    "            finalYear = finalYear+1\n",
    "    return finalYear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>street_name</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>70.0</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>152203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>541</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1981</td>\n",
       "      <td>65.0</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>152204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>163</td>\n",
       "      <td>ANG MO KIO AVE 4</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>69.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>152205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>446</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1979</td>\n",
       "      <td>63.0</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>557</td>\n",
       "      <td>ANG MO KIO AVE 10</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64.0</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152207</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   month        town flat_type block        street_name storey_range  \\\n",
       "0   2015  ANG MO KIO    3 ROOM   174   ANG MO KIO AVE 4     07 TO 09   \n",
       "1   2015  ANG MO KIO    3 ROOM   541  ANG MO KIO AVE 10     01 TO 03   \n",
       "2   2015  ANG MO KIO    3 ROOM   163   ANG MO KIO AVE 4     01 TO 03   \n",
       "3   2015  ANG MO KIO    3 ROOM   446  ANG MO KIO AVE 10     01 TO 03   \n",
       "4   2015  ANG MO KIO    3 ROOM   557  ANG MO KIO AVE 10     07 TO 09   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date  remaining_lease  \\\n",
       "0            60.0        Improved                 1986             70.0   \n",
       "1            68.0  New Generation                 1981             65.0   \n",
       "2            69.0  New Generation                 1980             64.0   \n",
       "3            68.0  New Generation                 1979             63.0   \n",
       "4            68.0  New Generation                 1980             64.0   \n",
       "\n",
       "   resale_price  uniqueID  \n",
       "0      255000.0    152203  \n",
       "1      275000.0    152204  \n",
       "2      285000.0    152205  \n",
       "3      290000.0    152206  \n",
       "4      290000.0    152207  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df['month'] = train_Merge_df.month.apply(GetCurrentYear)\n",
    "train_Merge_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "month                    int64\n",
       "town                    object\n",
       "flat_type               object\n",
       "block                   object\n",
       "street_name             object\n",
       "storey_range            object\n",
       "floor_area_sqm         float64\n",
       "flat_model              object\n",
       "lease_commence_date      int64\n",
       "remaining_lease        float64\n",
       "resale_price           float64\n",
       "uniqueID                 int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_Merge_df['remaining_lease'] = train_Merge_df['remaining_lease'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "month                  0\n",
       "town                   0\n",
       "flat_type              0\n",
       "block                  0\n",
       "street_name            0\n",
       "storey_range           0\n",
       "floor_area_sqm         0\n",
       "flat_model             0\n",
       "lease_commence_date    0\n",
       "remaining_lease        0\n",
       "resale_price           0\n",
       "uniqueID               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_Merge_df['month'] = train_Merge_df['month'].astype('int64')\n",
    "train_Merge_df['town'] = train_Merge_df['town'].astype('category')\n",
    "train_Merge_df['flat_type'] = train_Merge_df['flat_type'].astype('category')\n",
    "train_Merge_df['block'] = train_Merge_df['block'].astype('category')\n",
    "train_Merge_df['street_name'] = train_Merge_df['street_name'].astype('category')\n",
    "train_Merge_df['storey_range'] = train_Merge_df['storey_range'].astype('category')\n",
    "train_Merge_df['flat_model'] = train_Merge_df['flat_model'].astype('category')\n",
    "train_Merge_df['remaining_lease'] = train_Merge_df['remaining_lease'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "maxLeaseYear = 99\n",
    "train_Merge_df['remaining_lease'] = maxLeaseYear-(train_Merge_df['month'] - train_Merge_df['lease_commence_date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "month                  bool\n",
       "town                   bool\n",
       "flat_type              bool\n",
       "block                  bool\n",
       "street_name            bool\n",
       "storey_range           bool\n",
       "floor_area_sqm         bool\n",
       "flat_model             bool\n",
       "lease_commence_date    bool\n",
       "remaining_lease        bool\n",
       "resale_price           bool\n",
       "uniqueID               bool\n",
       "dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df.isnull().dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_Merge_df['month'] = train_Merge_df['month'].astype('int64')\n",
    "train_Merge_df['town'] = train_Merge_df['town'].astype('category')\n",
    "train_Merge_df['flat_type'] = train_Merge_df['flat_type'].astype('category')\n",
    "train_Merge_df['block'] = train_Merge_df['block'].astype('category')\n",
    "train_Merge_df['street_name'] = train_Merge_df['street_name'].astype('category')\n",
    "train_Merge_df['storey_range'] = train_Merge_df['storey_range'].astype('category')\n",
    "train_Merge_df['floor_area_sqm'] = train_Merge_df['floor_area_sqm'].astype('float64')\n",
    "train_Merge_df['flat_model'] = train_Merge_df['flat_model'].astype('category')\n",
    "train_Merge_df['lease_commence_date'] = train_Merge_df['lease_commence_date'].astype('int64')\n",
    "train_Merge_df['remaining_lease'] = train_Merge_df['remaining_lease'].astype('int64')\n",
    "train_Merge_df['resale_price'] = train_Merge_df['resale_price'].astype('float64')\n",
    "train_Merge_df['uniqueID'] = train_Merge_df['uniqueID'].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building</th>\n",
       "      <th>Jurong East MRT station</th>\n",
       "      <th>Bukit Batok MRT station</th>\n",
       "      <th>Bukit Gombak MRT station</th>\n",
       "      <th>Choa Chu Kang MRT station</th>\n",
       "      <th>Yew Tee MRT station</th>\n",
       "      <th>Kranji MRT station</th>\n",
       "      <th>Marsiling MRT station</th>\n",
       "      <th>Woodlands MRT station</th>\n",
       "      <th>Admiralty MRT station</th>\n",
       "      <th>...</th>\n",
       "      <th>Bendemeer MRT station</th>\n",
       "      <th>Geylang Bahru MRT Station</th>\n",
       "      <th>Mattar MRT station</th>\n",
       "      <th>Ubi MRT station</th>\n",
       "      <th>Kaki Bukit MRT Station</th>\n",
       "      <th>Bedok North MRT station</th>\n",
       "      <th>Bedok Reservoir MRT station</th>\n",
       "      <th>Tampines West MRT station</th>\n",
       "      <th>Tampines East MRT station</th>\n",
       "      <th>Upper Changi MRT station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ANCHORVALE ST BLK 331C</td>\n",
       "      <td>17818.84265</td>\n",
       "      <td>16471.03384</td>\n",
       "      <td>15856.79247</td>\n",
       "      <td>16199.22480</td>\n",
       "      <td>15808.72792</td>\n",
       "      <td>14570.109930</td>\n",
       "      <td>13485.500120</td>\n",
       "      <td>12369.979820</td>\n",
       "      <td>11061.899320</td>\n",
       "      <td>...</td>\n",
       "      <td>9584.39327</td>\n",
       "      <td>8494.000192</td>\n",
       "      <td>7640.691202</td>\n",
       "      <td>7398.618897</td>\n",
       "      <td>7079.585070</td>\n",
       "      <td>7440.940807</td>\n",
       "      <td>8107.447171</td>\n",
       "      <td>7743.354078</td>\n",
       "      <td>8438.549604</td>\n",
       "      <td>9950.182657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PUNGGOL WAY BLK 266B</td>\n",
       "      <td>19092.61457</td>\n",
       "      <td>17694.05674</td>\n",
       "      <td>17032.15623</td>\n",
       "      <td>17205.95322</td>\n",
       "      <td>16731.88625</td>\n",
       "      <td>15248.533120</td>\n",
       "      <td>14065.860790</td>\n",
       "      <td>12863.730930</td>\n",
       "      <td>11445.713010</td>\n",
       "      <td>...</td>\n",
       "      <td>10932.92815</td>\n",
       "      <td>9808.425468</td>\n",
       "      <td>8872.302279</td>\n",
       "      <td>8425.747280</td>\n",
       "      <td>7957.972942</td>\n",
       "      <td>8163.873942</td>\n",
       "      <td>8589.377565</td>\n",
       "      <td>8042.543847</td>\n",
       "      <td>8366.769609</td>\n",
       "      <td>9996.575353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>YISHUN AVE 9 BLK 318A</td>\n",
       "      <td>15919.39969</td>\n",
       "      <td>14166.65357</td>\n",
       "      <td>13182.50154</td>\n",
       "      <td>12293.68148</td>\n",
       "      <td>11439.72263</td>\n",
       "      <td>9122.636441</td>\n",
       "      <td>7722.266883</td>\n",
       "      <td>6368.157244</td>\n",
       "      <td>4795.908711</td>\n",
       "      <td>...</td>\n",
       "      <td>13570.68606</td>\n",
       "      <td>12907.865810</td>\n",
       "      <td>12661.750790</td>\n",
       "      <td>13179.447730</td>\n",
       "      <td>13208.994580</td>\n",
       "      <td>13791.613210</td>\n",
       "      <td>14675.215580</td>\n",
       "      <td>14401.138090</td>\n",
       "      <td>15072.755350</td>\n",
       "      <td>16621.097390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>YISHUN AVE 9 BLK 318B</td>\n",
       "      <td>15903.04510</td>\n",
       "      <td>14152.90288</td>\n",
       "      <td>13171.66285</td>\n",
       "      <td>12296.13129</td>\n",
       "      <td>11447.44104</td>\n",
       "      <td>9144.786709</td>\n",
       "      <td>7748.983596</td>\n",
       "      <td>6398.540744</td>\n",
       "      <td>4831.224121</td>\n",
       "      <td>...</td>\n",
       "      <td>13515.78029</td>\n",
       "      <td>12851.563270</td>\n",
       "      <td>12604.181940</td>\n",
       "      <td>13121.274190</td>\n",
       "      <td>13151.040900</td>\n",
       "      <td>13734.103470</td>\n",
       "      <td>14618.776730</td>\n",
       "      <td>14345.977870</td>\n",
       "      <td>15020.740460</td>\n",
       "      <td>16567.813760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>YISHUN AVE 9 BLK 315A</td>\n",
       "      <td>15705.88647</td>\n",
       "      <td>13955.91314</td>\n",
       "      <td>12975.36314</td>\n",
       "      <td>12109.29884</td>\n",
       "      <td>11267.18726</td>\n",
       "      <td>8991.283610</td>\n",
       "      <td>7607.087576</td>\n",
       "      <td>6267.390055</td>\n",
       "      <td>4716.850722</td>\n",
       "      <td>...</td>\n",
       "      <td>13402.90599</td>\n",
       "      <td>12752.522990</td>\n",
       "      <td>12524.591610</td>\n",
       "      <td>13068.535130</td>\n",
       "      <td>13115.059640</td>\n",
       "      <td>13710.617970</td>\n",
       "      <td>14613.647670</td>\n",
       "      <td>14356.366340</td>\n",
       "      <td>15058.662370</td>\n",
       "      <td>16595.614410</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 120 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Building  Jurong East MRT station  Bukit Batok MRT station  \\\n",
       "0  ANCHORVALE ST BLK 331C              17818.84265              16471.03384   \n",
       "1    PUNGGOL WAY BLK 266B              19092.61457              17694.05674   \n",
       "2   YISHUN AVE 9 BLK 318A              15919.39969              14166.65357   \n",
       "3   YISHUN AVE 9 BLK 318B              15903.04510              14152.90288   \n",
       "4   YISHUN AVE 9 BLK 315A              15705.88647              13955.91314   \n",
       "\n",
       "   Bukit Gombak MRT station  Choa Chu Kang MRT station  Yew Tee MRT station  \\\n",
       "0               15856.79247                16199.22480          15808.72792   \n",
       "1               17032.15623                17205.95322          16731.88625   \n",
       "2               13182.50154                12293.68148          11439.72263   \n",
       "3               13171.66285                12296.13129          11447.44104   \n",
       "4               12975.36314                12109.29884          11267.18726   \n",
       "\n",
       "   Kranji MRT station  Marsiling MRT station  Woodlands MRT station  \\\n",
       "0        14570.109930           13485.500120           12369.979820   \n",
       "1        15248.533120           14065.860790           12863.730930   \n",
       "2         9122.636441            7722.266883            6368.157244   \n",
       "3         9144.786709            7748.983596            6398.540744   \n",
       "4         8991.283610            7607.087576            6267.390055   \n",
       "\n",
       "   Admiralty MRT station  ...  Bendemeer MRT station  \\\n",
       "0           11061.899320  ...             9584.39327   \n",
       "1           11445.713010  ...            10932.92815   \n",
       "2            4795.908711  ...            13570.68606   \n",
       "3            4831.224121  ...            13515.78029   \n",
       "4            4716.850722  ...            13402.90599   \n",
       "\n",
       "   Geylang Bahru MRT Station  Mattar MRT station  Ubi MRT station  \\\n",
       "0                8494.000192         7640.691202      7398.618897   \n",
       "1                9808.425468         8872.302279      8425.747280   \n",
       "2               12907.865810        12661.750790     13179.447730   \n",
       "3               12851.563270        12604.181940     13121.274190   \n",
       "4               12752.522990        12524.591610     13068.535130   \n",
       "\n",
       "   Kaki Bukit MRT Station  Bedok North MRT station  \\\n",
       "0             7079.585070              7440.940807   \n",
       "1             7957.972942              8163.873942   \n",
       "2            13208.994580             13791.613210   \n",
       "3            13151.040900             13734.103470   \n",
       "4            13115.059640             13710.617970   \n",
       "\n",
       "   Bedok Reservoir MRT station  Tampines West MRT station  \\\n",
       "0                  8107.447171                7743.354078   \n",
       "1                  8589.377565                8042.543847   \n",
       "2                 14675.215580               14401.138090   \n",
       "3                 14618.776730               14345.977870   \n",
       "4                 14613.647670               14356.366340   \n",
       "\n",
       "   Tampines East MRT station  Upper Changi MRT station  \n",
       "0                8438.549604               9950.182657  \n",
       "1                8366.769609               9996.575353  \n",
       "2               15072.755350              16621.097390  \n",
       "3               15020.740460              16567.813760  \n",
       "4               15058.662370              16595.614410  \n",
       "\n",
       "[5 rows x 120 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train4_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Building\n",
      "0        ANCHORVALE ST BLK 331C\n",
      "1          PUNGGOL WAY BLK 266B\n",
      "2         YISHUN AVE 9 BLK 318A\n",
      "3         YISHUN AVE 9 BLK 318B\n",
      "4         YISHUN AVE 9 BLK 315A\n",
      "...                         ...\n",
      "8806    TELOK BLANGAH DR BLK 46\n",
      "8807       BT PURMEI RD BLK 101\n",
      "8808    TELOK BLANGAH DR BLK 44\n",
      "8809  TELOK BLANGAH RISE BLK 42\n",
      "8810  TELOK BLANGAH RISE BLK 43\n",
      "\n",
      "[8811 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "q1 = \"\"\"SELECT Building FROM train4_df \"\"\"\n",
    "print(ps.sqldf(q1, locals()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['ANCHORVALE ST BLK 331C', 'PUNGGOL WAY BLK 266B',\n",
       "       'YISHUN AVE 9 BLK 318A', ..., 'TELOK BLANGAH DR BLK 44',\n",
       "       'TELOK BLANGAH RISE BLK 42', 'TELOK BLANGAH RISE BLK 43'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train4_df.Building.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Merging the main data frame with amenities distance data frame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_Merge_df['street_name'] = train_Merge_df['street_name'].str.cat(train_Merge_df['block'], sep =\" BLK \") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>street_name</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>70</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>152203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>541</td>\n",
       "      <td>ANG MO KIO AVE 10 BLK 541</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1981</td>\n",
       "      <td>65</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>152204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>163</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 163</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>69.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>152205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>446</td>\n",
       "      <td>ANG MO KIO AVE 10 BLK 446</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1979</td>\n",
       "      <td>63</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>557</td>\n",
       "      <td>ANG MO KIO AVE 10 BLK 557</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152207</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   month        town flat_type block                street_name storey_range  \\\n",
       "0   2015  ANG MO KIO    3 ROOM   174   ANG MO KIO AVE 4 BLK 174     07 TO 09   \n",
       "1   2015  ANG MO KIO    3 ROOM   541  ANG MO KIO AVE 10 BLK 541     01 TO 03   \n",
       "2   2015  ANG MO KIO    3 ROOM   163   ANG MO KIO AVE 4 BLK 163     01 TO 03   \n",
       "3   2015  ANG MO KIO    3 ROOM   446  ANG MO KIO AVE 10 BLK 446     01 TO 03   \n",
       "4   2015  ANG MO KIO    3 ROOM   557  ANG MO KIO AVE 10 BLK 557     07 TO 09   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date  remaining_lease  \\\n",
       "0            60.0        Improved                 1986               70   \n",
       "1            68.0  New Generation                 1981               65   \n",
       "2            69.0  New Generation                 1980               64   \n",
       "3            68.0  New Generation                 1979               63   \n",
       "4            68.0  New Generation                 1980               64   \n",
       "\n",
       "   resale_price uniqueID  \n",
       "0      255000.0   152203  \n",
       "1      275000.0   152204  \n",
       "2      285000.0   152205  \n",
       "3      290000.0   152206  \n",
       "4      290000.0   152207  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_Merge_df.rename(columns = {\"street_name\": \"Building\", \"month\":\"Year\"},inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>Building</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>uniqueID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>70</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>152203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>541</td>\n",
       "      <td>ANG MO KIO AVE 10 BLK 541</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1981</td>\n",
       "      <td>65</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>152204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>163</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 163</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>69.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>152205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>446</td>\n",
       "      <td>ANG MO KIO AVE 10 BLK 446</td>\n",
       "      <td>01 TO 03</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1979</td>\n",
       "      <td>63</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>557</td>\n",
       "      <td>ANG MO KIO AVE 10 BLK 557</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>68.0</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>1980</td>\n",
       "      <td>64</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>152207</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year        town flat_type block                   Building storey_range  \\\n",
       "0  2015  ANG MO KIO    3 ROOM   174   ANG MO KIO AVE 4 BLK 174     07 TO 09   \n",
       "1  2015  ANG MO KIO    3 ROOM   541  ANG MO KIO AVE 10 BLK 541     01 TO 03   \n",
       "2  2015  ANG MO KIO    3 ROOM   163   ANG MO KIO AVE 4 BLK 163     01 TO 03   \n",
       "3  2015  ANG MO KIO    3 ROOM   446  ANG MO KIO AVE 10 BLK 446     01 TO 03   \n",
       "4  2015  ANG MO KIO    3 ROOM   557  ANG MO KIO AVE 10 BLK 557     07 TO 09   \n",
       "\n",
       "   floor_area_sqm      flat_model  lease_commence_date  remaining_lease  \\\n",
       "0            60.0        Improved                 1986               70   \n",
       "1            68.0  New Generation                 1981               65   \n",
       "2            69.0  New Generation                 1980               64   \n",
       "3            68.0  New Generation                 1979               63   \n",
       "4            68.0  New Generation                 1980               64   \n",
       "\n",
       "   resale_price uniqueID  \n",
       "0      255000.0   152203  \n",
       "1      275000.0   152204  \n",
       "2      285000.0   152205  \n",
       "3      290000.0   152206  \n",
       "4      290000.0   152207  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Merge_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building</th>\n",
       "      <th>Jurong East MRT station</th>\n",
       "      <th>Bukit Batok MRT station</th>\n",
       "      <th>Bukit Gombak MRT station</th>\n",
       "      <th>Choa Chu Kang MRT station</th>\n",
       "      <th>Yew Tee MRT station</th>\n",
       "      <th>Kranji MRT station</th>\n",
       "      <th>Marsiling MRT station</th>\n",
       "      <th>Woodlands MRT station</th>\n",
       "      <th>Admiralty MRT station</th>\n",
       "      <th>...</th>\n",
       "      <th>Bendemeer MRT station</th>\n",
       "      <th>Geylang Bahru MRT Station</th>\n",
       "      <th>Mattar MRT station</th>\n",
       "      <th>Ubi MRT station</th>\n",
       "      <th>Kaki Bukit MRT Station</th>\n",
       "      <th>Bedok North MRT station</th>\n",
       "      <th>Bedok Reservoir MRT station</th>\n",
       "      <th>Tampines West MRT station</th>\n",
       "      <th>Tampines East MRT station</th>\n",
       "      <th>Upper Changi MRT station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ANCHORVALE ST BLK 331C</td>\n",
       "      <td>17818.84265</td>\n",
       "      <td>16471.03384</td>\n",
       "      <td>15856.79247</td>\n",
       "      <td>16199.22480</td>\n",
       "      <td>15808.72792</td>\n",
       "      <td>14570.109930</td>\n",
       "      <td>13485.500120</td>\n",
       "      <td>12369.979820</td>\n",
       "      <td>11061.899320</td>\n",
       "      <td>...</td>\n",
       "      <td>9584.39327</td>\n",
       "      <td>8494.000192</td>\n",
       "      <td>7640.691202</td>\n",
       "      <td>7398.618897</td>\n",
       "      <td>7079.585070</td>\n",
       "      <td>7440.940807</td>\n",
       "      <td>8107.447171</td>\n",
       "      <td>7743.354078</td>\n",
       "      <td>8438.549604</td>\n",
       "      <td>9950.182657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PUNGGOL WAY BLK 266B</td>\n",
       "      <td>19092.61457</td>\n",
       "      <td>17694.05674</td>\n",
       "      <td>17032.15623</td>\n",
       "      <td>17205.95322</td>\n",
       "      <td>16731.88625</td>\n",
       "      <td>15248.533120</td>\n",
       "      <td>14065.860790</td>\n",
       "      <td>12863.730930</td>\n",
       "      <td>11445.713010</td>\n",
       "      <td>...</td>\n",
       "      <td>10932.92815</td>\n",
       "      <td>9808.425468</td>\n",
       "      <td>8872.302279</td>\n",
       "      <td>8425.747280</td>\n",
       "      <td>7957.972942</td>\n",
       "      <td>8163.873942</td>\n",
       "      <td>8589.377565</td>\n",
       "      <td>8042.543847</td>\n",
       "      <td>8366.769609</td>\n",
       "      <td>9996.575353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>YISHUN AVE 9 BLK 318A</td>\n",
       "      <td>15919.39969</td>\n",
       "      <td>14166.65357</td>\n",
       "      <td>13182.50154</td>\n",
       "      <td>12293.68148</td>\n",
       "      <td>11439.72263</td>\n",
       "      <td>9122.636441</td>\n",
       "      <td>7722.266883</td>\n",
       "      <td>6368.157244</td>\n",
       "      <td>4795.908711</td>\n",
       "      <td>...</td>\n",
       "      <td>13570.68606</td>\n",
       "      <td>12907.865810</td>\n",
       "      <td>12661.750790</td>\n",
       "      <td>13179.447730</td>\n",
       "      <td>13208.994580</td>\n",
       "      <td>13791.613210</td>\n",
       "      <td>14675.215580</td>\n",
       "      <td>14401.138090</td>\n",
       "      <td>15072.755350</td>\n",
       "      <td>16621.097390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>YISHUN AVE 9 BLK 318B</td>\n",
       "      <td>15903.04510</td>\n",
       "      <td>14152.90288</td>\n",
       "      <td>13171.66285</td>\n",
       "      <td>12296.13129</td>\n",
       "      <td>11447.44104</td>\n",
       "      <td>9144.786709</td>\n",
       "      <td>7748.983596</td>\n",
       "      <td>6398.540744</td>\n",
       "      <td>4831.224121</td>\n",
       "      <td>...</td>\n",
       "      <td>13515.78029</td>\n",
       "      <td>12851.563270</td>\n",
       "      <td>12604.181940</td>\n",
       "      <td>13121.274190</td>\n",
       "      <td>13151.040900</td>\n",
       "      <td>13734.103470</td>\n",
       "      <td>14618.776730</td>\n",
       "      <td>14345.977870</td>\n",
       "      <td>15020.740460</td>\n",
       "      <td>16567.813760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>YISHUN AVE 9 BLK 315A</td>\n",
       "      <td>15705.88647</td>\n",
       "      <td>13955.91314</td>\n",
       "      <td>12975.36314</td>\n",
       "      <td>12109.29884</td>\n",
       "      <td>11267.18726</td>\n",
       "      <td>8991.283610</td>\n",
       "      <td>7607.087576</td>\n",
       "      <td>6267.390055</td>\n",
       "      <td>4716.850722</td>\n",
       "      <td>...</td>\n",
       "      <td>13402.90599</td>\n",
       "      <td>12752.522990</td>\n",
       "      <td>12524.591610</td>\n",
       "      <td>13068.535130</td>\n",
       "      <td>13115.059640</td>\n",
       "      <td>13710.617970</td>\n",
       "      <td>14613.647670</td>\n",
       "      <td>14356.366340</td>\n",
       "      <td>15058.662370</td>\n",
       "      <td>16595.614410</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 120 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Building  Jurong East MRT station  Bukit Batok MRT station  \\\n",
       "0  ANCHORVALE ST BLK 331C              17818.84265              16471.03384   \n",
       "1    PUNGGOL WAY BLK 266B              19092.61457              17694.05674   \n",
       "2   YISHUN AVE 9 BLK 318A              15919.39969              14166.65357   \n",
       "3   YISHUN AVE 9 BLK 318B              15903.04510              14152.90288   \n",
       "4   YISHUN AVE 9 BLK 315A              15705.88647              13955.91314   \n",
       "\n",
       "   Bukit Gombak MRT station  Choa Chu Kang MRT station  Yew Tee MRT station  \\\n",
       "0               15856.79247                16199.22480          15808.72792   \n",
       "1               17032.15623                17205.95322          16731.88625   \n",
       "2               13182.50154                12293.68148          11439.72263   \n",
       "3               13171.66285                12296.13129          11447.44104   \n",
       "4               12975.36314                12109.29884          11267.18726   \n",
       "\n",
       "   Kranji MRT station  Marsiling MRT station  Woodlands MRT station  \\\n",
       "0        14570.109930           13485.500120           12369.979820   \n",
       "1        15248.533120           14065.860790           12863.730930   \n",
       "2         9122.636441            7722.266883            6368.157244   \n",
       "3         9144.786709            7748.983596            6398.540744   \n",
       "4         8991.283610            7607.087576            6267.390055   \n",
       "\n",
       "   Admiralty MRT station  ...  Bendemeer MRT station  \\\n",
       "0           11061.899320  ...             9584.39327   \n",
       "1           11445.713010  ...            10932.92815   \n",
       "2            4795.908711  ...            13570.68606   \n",
       "3            4831.224121  ...            13515.78029   \n",
       "4            4716.850722  ...            13402.90599   \n",
       "\n",
       "   Geylang Bahru MRT Station  Mattar MRT station  Ubi MRT station  \\\n",
       "0                8494.000192         7640.691202      7398.618897   \n",
       "1                9808.425468         8872.302279      8425.747280   \n",
       "2               12907.865810        12661.750790     13179.447730   \n",
       "3               12851.563270        12604.181940     13121.274190   \n",
       "4               12752.522990        12524.591610     13068.535130   \n",
       "\n",
       "   Kaki Bukit MRT Station  Bedok North MRT station  \\\n",
       "0             7079.585070              7440.940807   \n",
       "1             7957.972942              8163.873942   \n",
       "2            13208.994580             13791.613210   \n",
       "3            13151.040900             13734.103470   \n",
       "4            13115.059640             13710.617970   \n",
       "\n",
       "   Bedok Reservoir MRT station  Tampines West MRT station  \\\n",
       "0                  8107.447171                7743.354078   \n",
       "1                  8589.377565                8042.543847   \n",
       "2                 14675.215580               14401.138090   \n",
       "3                 14618.776730               14345.977870   \n",
       "4                 14613.647670               14356.366340   \n",
       "\n",
       "   Tampines East MRT station  Upper Changi MRT station  \n",
       "0                8438.549604               9950.182657  \n",
       "1                8366.769609               9996.575353  \n",
       "2               15072.755350              16621.097390  \n",
       "3               15020.740460              16567.813760  \n",
       "4               15058.662370              16595.614410  \n",
       "\n",
       "[5 rows x 120 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " train4_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df = pd.merge(train_Merge_df,train4_df,how=\"inner\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Merge shape =  (121934, 12)\n",
      "final df shape =  (121934, 131)\n"
     ]
    }
   ],
   "source": [
    "print(\"Train Merge shape = \",train_Merge_df.shape)\n",
    "print('final df shape = ',final_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8811, 120)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train4_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>Building</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>...</th>\n",
       "      <th>Bendemeer MRT station</th>\n",
       "      <th>Geylang Bahru MRT Station</th>\n",
       "      <th>Mattar MRT station</th>\n",
       "      <th>Ubi MRT station</th>\n",
       "      <th>Kaki Bukit MRT Station</th>\n",
       "      <th>Bedok North MRT station</th>\n",
       "      <th>Bedok Reservoir MRT station</th>\n",
       "      <th>Tampines West MRT station</th>\n",
       "      <th>Tampines East MRT station</th>\n",
       "      <th>Upper Changi MRT station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>70</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>10 TO 12</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>69</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>04 TO 06</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>69</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>2 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>07 TO 09</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>69</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>04 TO 06</td>\n",
       "      <td>61.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>68</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 131 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year        town flat_type block                  Building storey_range  \\\n",
       "0  2015  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174     07 TO 09   \n",
       "1  2016  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174     10 TO 12   \n",
       "2  2016  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174     04 TO 06   \n",
       "3  2016  ANG MO KIO    2 ROOM   174  ANG MO KIO AVE 4 BLK 174     07 TO 09   \n",
       "4  2017  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174     04 TO 06   \n",
       "\n",
       "   floor_area_sqm flat_model  lease_commence_date  remaining_lease  ...  \\\n",
       "0            60.0   Improved                 1986               70  ...   \n",
       "1            60.0   Improved                 1986               69  ...   \n",
       "2            69.0   Improved                 1986               69  ...   \n",
       "3            45.0   Improved                 1986               69  ...   \n",
       "4            61.0   Improved                 1986               68  ...   \n",
       "\n",
       "   Bendemeer MRT station Geylang Bahru MRT Station  Mattar MRT station  \\\n",
       "0            7421.041681               7081.755148         7352.239556   \n",
       "1            7421.041681               7081.755148         7352.239556   \n",
       "2            7421.041681               7081.755148         7352.239556   \n",
       "3            7421.041681               7081.755148         7352.239556   \n",
       "4            7421.041681               7081.755148         7352.239556   \n",
       "\n",
       "   Ubi MRT station  Kaki Bukit MRT Station  Bedok North MRT station  \\\n",
       "0      8596.977026             9133.510791              10044.62663   \n",
       "1      8596.977026             9133.510791              10044.62663   \n",
       "2      8596.977026             9133.510791              10044.62663   \n",
       "3      8596.977026             9133.510791              10044.62663   \n",
       "4      8596.977026             9133.510791              10044.62663   \n",
       "\n",
       "   Bedok Reservoir MRT station  Tampines West MRT station  \\\n",
       "0                  11422.48939                11677.87443   \n",
       "1                  11422.48939                11677.87443   \n",
       "2                  11422.48939                11677.87443   \n",
       "3                  11422.48939                11677.87443   \n",
       "4                  11422.48939                11677.87443   \n",
       "\n",
       "   Tampines East MRT station  Upper Changi MRT station  \n",
       "0                 13199.5679               14274.52606  \n",
       "1                 13199.5679               14274.52606  \n",
       "2                 13199.5679               14274.52606  \n",
       "3                 13199.5679               14274.52606  \n",
       "4                 13199.5679               14274.52606  \n",
       "\n",
       "[5 rows x 131 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df['Building'] = final_df['Building'].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year                              int64\n",
       "town                           category\n",
       "flat_type                      category\n",
       "block                          category\n",
       "Building                       category\n",
       "                                 ...   \n",
       "Bedok North MRT station         float64\n",
       "Bedok Reservoir MRT station     float64\n",
       "Tampines West MRT station       float64\n",
       "Tampines East MRT station       float64\n",
       "Upper Changi MRT station        float64\n",
       "Length: 131, dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# final_df.loc[:, final_df.dtypes == np.object]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Binning the Apartment based on its storey range:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetStoreyName(range):\n",
    "    storeyName = \"SmallStorey\"\n",
    "    storey = int(range.split('TO')[1])\n",
    "    if(storey>=1 and storey<21):\n",
    "        storeyName = \"SmallStorey\"\n",
    "    if(storey>=21 and storey<41):\n",
    "        storeyName = \"MediumStorey\"\n",
    "    if(storey>=41):\n",
    "        storeyName = \"LargeStorey\"\n",
    "    return storeyName"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df['storey_range'] = final_df.storey_range.apply(GetStoreyName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['SmallStorey', 'MediumStorey', 'LargeStorey'], dtype=object)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.storey_range.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape before dropping an attribute (121934, 131)\n",
      "Shape after dropping an attribute (121934, 130)\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape before dropping an attribute\",final_df.shape)\n",
    "final_df.drop(\"uniqueID\",axis=1,inplace=True)\n",
    "print(\"Shape after dropping an attribute\",final_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>block</th>\n",
       "      <th>Building</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>lease_commence_date</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>...</th>\n",
       "      <th>Bendemeer MRT station</th>\n",
       "      <th>Geylang Bahru MRT Station</th>\n",
       "      <th>Mattar MRT station</th>\n",
       "      <th>Ubi MRT station</th>\n",
       "      <th>Kaki Bukit MRT Station</th>\n",
       "      <th>Bedok North MRT station</th>\n",
       "      <th>Bedok Reservoir MRT station</th>\n",
       "      <th>Tampines West MRT station</th>\n",
       "      <th>Tampines East MRT station</th>\n",
       "      <th>Upper Changi MRT station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>70</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>69</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>69</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>2 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>69</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017</td>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>174</td>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>61.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>1986</td>\n",
       "      <td>68</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 130 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year        town flat_type block                  Building storey_range  \\\n",
       "0  2015  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174  SmallStorey   \n",
       "1  2016  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174  SmallStorey   \n",
       "2  2016  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174  SmallStorey   \n",
       "3  2016  ANG MO KIO    2 ROOM   174  ANG MO KIO AVE 4 BLK 174  SmallStorey   \n",
       "4  2017  ANG MO KIO    3 ROOM   174  ANG MO KIO AVE 4 BLK 174  SmallStorey   \n",
       "\n",
       "   floor_area_sqm flat_model  lease_commence_date  remaining_lease  ...  \\\n",
       "0            60.0   Improved                 1986               70  ...   \n",
       "1            60.0   Improved                 1986               69  ...   \n",
       "2            69.0   Improved                 1986               69  ...   \n",
       "3            45.0   Improved                 1986               69  ...   \n",
       "4            61.0   Improved                 1986               68  ...   \n",
       "\n",
       "   Bendemeer MRT station  Geylang Bahru MRT Station  Mattar MRT station  \\\n",
       "0            7421.041681                7081.755148         7352.239556   \n",
       "1            7421.041681                7081.755148         7352.239556   \n",
       "2            7421.041681                7081.755148         7352.239556   \n",
       "3            7421.041681                7081.755148         7352.239556   \n",
       "4            7421.041681                7081.755148         7352.239556   \n",
       "\n",
       "   Ubi MRT station  Kaki Bukit MRT Station  Bedok North MRT station  \\\n",
       "0      8596.977026             9133.510791              10044.62663   \n",
       "1      8596.977026             9133.510791              10044.62663   \n",
       "2      8596.977026             9133.510791              10044.62663   \n",
       "3      8596.977026             9133.510791              10044.62663   \n",
       "4      8596.977026             9133.510791              10044.62663   \n",
       "\n",
       "   Bedok Reservoir MRT station  Tampines West MRT station  \\\n",
       "0                  11422.48939                11677.87443   \n",
       "1                  11422.48939                11677.87443   \n",
       "2                  11422.48939                11677.87443   \n",
       "3                  11422.48939                11677.87443   \n",
       "4                  11422.48939                11677.87443   \n",
       "\n",
       "   Tampines East MRT station  Upper Changi MRT station  \n",
       "0                 13199.5679               14274.52606  \n",
       "1                 13199.5679               14274.52606  \n",
       "2                 13199.5679               14274.52606  \n",
       "3                 13199.5679               14274.52606  \n",
       "4                 13199.5679               14274.52606  \n",
       "\n",
       "[5 rows x 130 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Building</th>\n",
       "      <th>remaining_lease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TELOK BLANGAH CRES BLK 7</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ANG MO KIO AVE 4 BLK 174</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ANG MO KIO AVE 10 BLK 557</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ANG MO KIO AVE 3 BLK 212</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Building  remaining_lease\n",
       "0   TELOK BLANGAH CRES BLK 7               59\n",
       "1   ANG MO KIO AVE 4 BLK 174               69\n",
       "2   ANG MO KIO AVE 4 BLK 174               70\n",
       "3  ANG MO KIO AVE 10 BLK 557               63\n",
       "4   ANG MO KIO AVE 3 BLK 212               58"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q1 = \"\"\"SELECT Building,remaining_lease FROM final_df group by flat_type \"\"\" \n",
    "newTemp_df = pd.DataFrame(ps.sqldf(q1, locals()))\n",
    "newTemp_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape before dropping an attribute (121934, 130)\n",
      "Shape after dropping an attribute (121934, 126)\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape before dropping an attribute\",final_df.shape)\n",
    "final_df.drop(['Building','block','Year','lease_commence_date'],axis=1,inplace=True)\n",
    "print(\"Shape after dropping an attribute\",final_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetCorrelationPlot(dataframe):\n",
    "    # Correlation plot to determine the togetherness of the features\n",
    "    corr = dataframe.corr()\n",
    "    ax = sns.heatmap(\n",
    "        corr, \n",
    "        vmin=-1, vmax=1, center=0,\n",
    "        cmap=sns.diverging_palette(20, 220, n=200),\n",
    "        square=True\n",
    "    )\n",
    "    ax.set_xticklabels(\n",
    "        ax.get_xticklabels(),\n",
    "        rotation=45,\n",
    "        horizontalalignment='right'\n",
    "    );\n",
    "    print(corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             floor_area_sqm  remaining_lease  resale_price  \\\n",
      "floor_area_sqm                     1.000000         0.390504      0.675338   \n",
      "remaining_lease                    0.390504         1.000000      0.383818   \n",
      "resale_price                       0.675338         0.383818      1.000000   \n",
      "Jurong East MRT station            0.076894         0.069049      0.053018   \n",
      "Bukit Batok MRT station            0.057191         0.042713      0.074170   \n",
      "...                                     ...              ...           ...   \n",
      "Bedok North MRT station            0.091597         0.145848     -0.121552   \n",
      "Bedok Reservoir MRT station        0.066988         0.127060     -0.116290   \n",
      "Tampines West MRT station          0.041148         0.095801     -0.110506   \n",
      "Tampines East MRT station          0.006943         0.058892     -0.104112   \n",
      "Upper Changi MRT station           0.026595         0.089405     -0.112780   \n",
      "\n",
      "                             Jurong East MRT station  Bukit Batok MRT station  \\\n",
      "floor_area_sqm                              0.076894                 0.057191   \n",
      "remaining_lease                             0.069049                 0.042713   \n",
      "resale_price                                0.053018                 0.074170   \n",
      "Jurong East MRT station                     1.000000                 0.991584   \n",
      "Bukit Batok MRT station                     0.991584                 1.000000   \n",
      "...                                              ...                      ...   \n",
      "Bedok North MRT station                    -0.828399                -0.842816   \n",
      "Bedok Reservoir MRT station                -0.864174                -0.878287   \n",
      "Tampines West MRT station                  -0.888944                -0.898879   \n",
      "Tampines East MRT station                  -0.916281                -0.922142   \n",
      "Upper Changi MRT station                   -0.902389                -0.913939   \n",
      "\n",
      "                             Bukit Gombak MRT station  \\\n",
      "floor_area_sqm                               0.037442   \n",
      "remaining_lease                              0.015412   \n",
      "resale_price                                 0.091429   \n",
      "Jurong East MRT station                      0.974022   \n",
      "Bukit Batok MRT station                      0.994660   \n",
      "...                                               ...   \n",
      "Bedok North MRT station                     -0.854463   \n",
      "Bedok Reservoir MRT station                 -0.888851   \n",
      "Tampines West MRT station                   -0.905657   \n",
      "Tampines East MRT station                   -0.924975   \n",
      "Upper Changi MRT station                    -0.921504   \n",
      "\n",
      "                             Choa Chu Kang MRT station  Yew Tee MRT station  \\\n",
      "floor_area_sqm                               -0.025286            -0.044756   \n",
      "remaining_lease                              -0.062557            -0.092639   \n",
      "resale_price                                  0.130660             0.144744   \n",
      "Jurong East MRT station                       0.904371             0.851779   \n",
      "Bukit Batok MRT station                       0.945888             0.904249   \n",
      "...                                                ...                  ...   \n",
      "Bedok North MRT station                      -0.889180            -0.878712   \n",
      "Bedok Reservoir MRT station                  -0.915889            -0.903592   \n",
      "Tampines West MRT station                    -0.922049            -0.905009   \n",
      "Tampines East MRT station                    -0.928787            -0.906750   \n",
      "Upper Changi MRT station                     -0.936173            -0.919720   \n",
      "\n",
      "                             Kranji MRT station  Marsiling MRT station  ...  \\\n",
      "floor_area_sqm                        -0.081861              -0.092851  ...   \n",
      "remaining_lease                       -0.155565              -0.176527  ...   \n",
      "resale_price                           0.177245               0.184195  ...   \n",
      "Jurong East MRT station                0.654105               0.527979  ...   \n",
      "Bukit Batok MRT station                0.731685               0.615303  ...   \n",
      "...                                         ...                    ...  ...   \n",
      "Bedok North MRT station               -0.791330              -0.707331  ...   \n",
      "Bedok Reservoir MRT station           -0.810945              -0.724695  ...   \n",
      "Tampines West MRT station             -0.799494              -0.707754  ...   \n",
      "Tampines East MRT station             -0.787976              -0.690953  ...   \n",
      "Upper Changi MRT station              -0.815745              -0.724926  ...   \n",
      "\n",
      "                             Bendemeer MRT station  Geylang Bahru MRT Station  \\\n",
      "floor_area_sqm                            0.259330                   0.225757   \n",
      "remaining_lease                           0.303553                   0.270076   \n",
      "resale_price                             -0.199679                  -0.177657   \n",
      "Jurong East MRT station                  -0.353092                  -0.483788   \n",
      "Bukit Batok MRT station                  -0.385808                  -0.508283   \n",
      "...                                            ...                        ...   \n",
      "Bedok North MRT station                   0.769497                   0.855277   \n",
      "Bedok Reservoir MRT station               0.712439                   0.805584   \n",
      "Tampines West MRT station                 0.670181                   0.770899   \n",
      "Tampines East MRT station                 0.606303                   0.715006   \n",
      "Upper Changi MRT station                  0.635794                   0.737931   \n",
      "\n",
      "                             Mattar MRT station  Ubi MRT station  \\\n",
      "floor_area_sqm                         0.185081         0.137140   \n",
      "remaining_lease                        0.230370         0.187504   \n",
      "resale_price                          -0.155857        -0.138680   \n",
      "Jurong East MRT station               -0.616851        -0.741478   \n",
      "Bukit Batok MRT station               -0.635716        -0.758488   \n",
      "...                                         ...              ...   \n",
      "Bedok North MRT station                0.930254         0.984189   \n",
      "Bedok Reservoir MRT station            0.891932         0.962256   \n",
      "Tampines West MRT station              0.865685         0.944706   \n",
      "Tampines East MRT station              0.819774         0.910654   \n",
      "Upper Changi MRT station               0.836917         0.924021   \n",
      "\n",
      "                             Kaki Bukit MRT Station  Bedok North MRT station  \\\n",
      "floor_area_sqm                             0.107858                 0.091597   \n",
      "remaining_lease                            0.157126                 0.145848   \n",
      "resale_price                              -0.127027                -0.121552   \n",
      "Jurong East MRT station                   -0.796404                -0.828399   \n",
      "Bukit Batok MRT station                   -0.810418                -0.842816   \n",
      "...                                             ...                      ...   \n",
      "Bedok North MRT station                    0.996807                 1.000000   \n",
      "Bedok Reservoir MRT station                0.983783                 0.994719   \n",
      "Tampines West MRT station                  0.972154                 0.986299   \n",
      "Tampines East MRT station                  0.945721                 0.964867   \n",
      "Upper Changi MRT station                   0.955512                 0.974057   \n",
      "\n",
      "                             Bedok Reservoir MRT station  \\\n",
      "floor_area_sqm                                  0.066988   \n",
      "remaining_lease                                 0.127060   \n",
      "resale_price                                   -0.116290   \n",
      "Jurong East MRT station                        -0.864174   \n",
      "Bukit Batok MRT station                        -0.878287   \n",
      "...                                                  ...   \n",
      "Bedok North MRT station                         0.994719   \n",
      "Bedok Reservoir MRT station                     1.000000   \n",
      "Tampines West MRT station                       0.996858   \n",
      "Tampines East MRT station                       0.983333   \n",
      "Upper Changi MRT station                        0.990903   \n",
      "\n",
      "                             Tampines West MRT station  \\\n",
      "floor_area_sqm                                0.041148   \n",
      "remaining_lease                               0.095801   \n",
      "resale_price                                 -0.110506   \n",
      "Jurong East MRT station                      -0.888944   \n",
      "Bukit Batok MRT station                      -0.898879   \n",
      "...                                                ...   \n",
      "Bedok North MRT station                       0.986299   \n",
      "Bedok Reservoir MRT station                   0.996858   \n",
      "Tampines West MRT station                     1.000000   \n",
      "Tampines East MRT station                     0.994026   \n",
      "Upper Changi MRT station                      0.996687   \n",
      "\n",
      "                             Tampines East MRT station  \\\n",
      "floor_area_sqm                                0.006943   \n",
      "remaining_lease                               0.058892   \n",
      "resale_price                                 -0.104112   \n",
      "Jurong East MRT station                      -0.916281   \n",
      "Bukit Batok MRT station                      -0.922142   \n",
      "...                                                ...   \n",
      "Bedok North MRT station                       0.964867   \n",
      "Bedok Reservoir MRT station                   0.983333   \n",
      "Tampines West MRT station                     0.994026   \n",
      "Tampines East MRT station                     1.000000   \n",
      "Upper Changi MRT station                      0.997175   \n",
      "\n",
      "                             Upper Changi MRT station  \n",
      "floor_area_sqm                               0.026595  \n",
      "remaining_lease                              0.089405  \n",
      "resale_price                                -0.112780  \n",
      "Jurong East MRT station                     -0.902389  \n",
      "Bukit Batok MRT station                     -0.913939  \n",
      "...                                               ...  \n",
      "Bedok North MRT station                      0.974057  \n",
      "Bedok Reservoir MRT station                  0.990903  \n",
      "Tampines West MRT station                    0.996687  \n",
      "Tampines East MRT station                    0.997175  \n",
      "Upper Changi MRT station                     1.000000  \n",
      "\n",
      "[122 rows x 122 columns]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "GetCorrelationPlot(final_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df['storey_range'] = final_df['storey_range'].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>resale_price</th>\n",
       "      <th>Jurong East MRT station</th>\n",
       "      <th>Bukit Batok MRT station</th>\n",
       "      <th>Bukit Gombak MRT station</th>\n",
       "      <th>...</th>\n",
       "      <th>Bendemeer MRT station</th>\n",
       "      <th>Geylang Bahru MRT Station</th>\n",
       "      <th>Mattar MRT station</th>\n",
       "      <th>Ubi MRT station</th>\n",
       "      <th>Kaki Bukit MRT Station</th>\n",
       "      <th>Bedok North MRT station</th>\n",
       "      <th>Bedok Reservoir MRT station</th>\n",
       "      <th>Tampines West MRT station</th>\n",
       "      <th>Tampines East MRT station</th>\n",
       "      <th>Upper Changi MRT station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>70</td>\n",
       "      <td>255000.0</td>\n",
       "      <td>11586.77774</td>\n",
       "      <td>10246.44956</td>\n",
       "      <td>9685.068194</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>69</td>\n",
       "      <td>275000.0</td>\n",
       "      <td>11586.77774</td>\n",
       "      <td>10246.44956</td>\n",
       "      <td>9685.068194</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>69</td>\n",
       "      <td>310000.0</td>\n",
       "      <td>11586.77774</td>\n",
       "      <td>10246.44956</td>\n",
       "      <td>9685.068194</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>2 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>69</td>\n",
       "      <td>253000.0</td>\n",
       "      <td>11586.77774</td>\n",
       "      <td>10246.44956</td>\n",
       "      <td>9685.068194</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ANG MO KIO</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>61.0</td>\n",
       "      <td>Improved</td>\n",
       "      <td>68</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>11586.77774</td>\n",
       "      <td>10246.44956</td>\n",
       "      <td>9685.068194</td>\n",
       "      <td>...</td>\n",
       "      <td>7421.041681</td>\n",
       "      <td>7081.755148</td>\n",
       "      <td>7352.239556</td>\n",
       "      <td>8596.977026</td>\n",
       "      <td>9133.510791</td>\n",
       "      <td>10044.62663</td>\n",
       "      <td>11422.48939</td>\n",
       "      <td>11677.87443</td>\n",
       "      <td>13199.5679</td>\n",
       "      <td>14274.52606</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 126 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         town flat_type storey_range  floor_area_sqm flat_model  \\\n",
       "0  ANG MO KIO    3 ROOM  SmallStorey            60.0   Improved   \n",
       "1  ANG MO KIO    3 ROOM  SmallStorey            60.0   Improved   \n",
       "2  ANG MO KIO    3 ROOM  SmallStorey            69.0   Improved   \n",
       "3  ANG MO KIO    2 ROOM  SmallStorey            45.0   Improved   \n",
       "4  ANG MO KIO    3 ROOM  SmallStorey            61.0   Improved   \n",
       "\n",
       "   remaining_lease  resale_price  Jurong East MRT station  \\\n",
       "0               70      255000.0              11586.77774   \n",
       "1               69      275000.0              11586.77774   \n",
       "2               69      310000.0              11586.77774   \n",
       "3               69      253000.0              11586.77774   \n",
       "4               68      290000.0              11586.77774   \n",
       "\n",
       "   Bukit Batok MRT station  Bukit Gombak MRT station  ...  \\\n",
       "0              10246.44956               9685.068194  ...   \n",
       "1              10246.44956               9685.068194  ...   \n",
       "2              10246.44956               9685.068194  ...   \n",
       "3              10246.44956               9685.068194  ...   \n",
       "4              10246.44956               9685.068194  ...   \n",
       "\n",
       "   Bendemeer MRT station  Geylang Bahru MRT Station  Mattar MRT station  \\\n",
       "0            7421.041681                7081.755148         7352.239556   \n",
       "1            7421.041681                7081.755148         7352.239556   \n",
       "2            7421.041681                7081.755148         7352.239556   \n",
       "3            7421.041681                7081.755148         7352.239556   \n",
       "4            7421.041681                7081.755148         7352.239556   \n",
       "\n",
       "   Ubi MRT station  Kaki Bukit MRT Station  Bedok North MRT station  \\\n",
       "0      8596.977026             9133.510791              10044.62663   \n",
       "1      8596.977026             9133.510791              10044.62663   \n",
       "2      8596.977026             9133.510791              10044.62663   \n",
       "3      8596.977026             9133.510791              10044.62663   \n",
       "4      8596.977026             9133.510791              10044.62663   \n",
       "\n",
       "   Bedok Reservoir MRT station  Tampines West MRT station  \\\n",
       "0                  11422.48939                11677.87443   \n",
       "1                  11422.48939                11677.87443   \n",
       "2                  11422.48939                11677.87443   \n",
       "3                  11422.48939                11677.87443   \n",
       "4                  11422.48939                11677.87443   \n",
       "\n",
       "   Tampines East MRT station  Upper Changi MRT station  \n",
       "0                 13199.5679               14274.52606  \n",
       "1                 13199.5679               14274.52606  \n",
       "2                 13199.5679               14274.52606  \n",
       "3                 13199.5679               14274.52606  \n",
       "4                 13199.5679               14274.52606  \n",
       "\n",
       "[5 rows x 126 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[ANG MO KIO, BEDOK, BISHAN, BUKIT BATOK, BUKIT MERAH, ..., SERANGOON, TAMPINES, TOA PAYOH, WOODLANDS, YISHUN]\n",
       "Length: 26\n",
       "Categories (26, object): [ANG MO KIO, BEDOK, BISHAN, BUKIT BATOK, ..., TAMPINES, TOA PAYOH, WOODLANDS, YISHUN]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.town.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([4.54480839e-01, 1.78511873e-02, 0.00000000e+00, 6.66262076e-01,\n",
       "        0.00000000e+00, 1.34061596e-01, 3.92616771e-01, 0.00000000e+00,\n",
       "        9.29464574e-04, 4.64732287e-04]),\n",
       " array([0. , 0.6, 1.2, 1.8, 2.4, 3. , 3.6, 4.2, 4.8, 5.4, 6. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.hist(final_df.flat_type, density=True, bins=10,color=['orange'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train and Test split:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y = final_df['resale_price']\n",
    "X = final_df.drop('resale_price', axis=1)\n",
    "X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.20,random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(97547, 125)\n",
      "(24387, 125)\n",
      "(97547,)\n",
      "(24387,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(Y_train.shape)\n",
    "print(Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_Atribute = X_train.select_dtypes(['float64','int64']).columns\n",
    "cat_Attributes = X_train.select_dtypes(['category']).columns\n",
    "num_unseenAttribute = X_test.select_dtypes(['float64','int64']).columns\n",
    "cat_unseenAttribute = X_test.select_dtypes(['category']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num attributes Index(['floor_area_sqm', 'remaining_lease', 'Jurong East MRT station',\n",
      "       'Bukit Batok MRT station', 'Bukit Gombak MRT station',\n",
      "       'Choa Chu Kang MRT station', 'Yew Tee MRT station',\n",
      "       'Kranji MRT station', 'Marsiling MRT station', 'Woodlands MRT station',\n",
      "       ...\n",
      "       'Bendemeer MRT station', 'Geylang Bahru MRT Station',\n",
      "       'Mattar MRT station', 'Ubi MRT station', 'Kaki Bukit MRT Station',\n",
      "       'Bedok North MRT station', 'Bedok Reservoir MRT station',\n",
      "       'Tampines West MRT station', 'Tampines East MRT station',\n",
      "       'Upper Changi MRT station'],\n",
      "      dtype='object', length=121)\n",
      "cat Attributes Index(['town', 'flat_type', 'storey_range', 'flat_model'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(\"Num attributes\",num_Atribute)\n",
    "print(\"cat Attributes\",cat_Attributes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Imputing Numeric variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n"
     ]
    }
   ],
   "source": [
    "numericImputer = SimpleImputer(strategy='median')\n",
    "numericImputer = numericImputer.fit(X_train[num_Atribute])\n",
    "X_train[num_Atribute] = numericImputer.transform(X_train[num_Atribute])\n",
    "X_test[num_Atribute] = numericImputer.transform(X_test[num_Atribute])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Imputing Categorical variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n"
     ]
    }
   ],
   "source": [
    "catImputer = SimpleImputer(strategy=\"most_frequent\")\n",
    "catImputer = catImputer.fit(X_train[cat_Attributes])\n",
    "X_train[cat_Attributes] = catImputer.transform(X_train[cat_Attributes])\n",
    "X_test[cat_Attributes] = catImputer.transform(X_test[cat_Attributes])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Standardizing Numeric attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/umar/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:965: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n"
     ]
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "\n",
    "scaler = scaler.fit(X_train[num_Atribute])\n",
    "\n",
    "X_train[num_Atribute]=scaler.transform(X_train[num_Atribute])\n",
    "X_test[num_Atribute]=scaler.transform(X_test[num_Atribute])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dummification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>town</th>\n",
       "      <th>flat_type</th>\n",
       "      <th>storey_range</th>\n",
       "      <th>floor_area_sqm</th>\n",
       "      <th>flat_model</th>\n",
       "      <th>remaining_lease</th>\n",
       "      <th>Jurong East MRT station</th>\n",
       "      <th>Bukit Batok MRT station</th>\n",
       "      <th>Bukit Gombak MRT station</th>\n",
       "      <th>Choa Chu Kang MRT station</th>\n",
       "      <th>...</th>\n",
       "      <th>Bendemeer MRT station</th>\n",
       "      <th>Geylang Bahru MRT Station</th>\n",
       "      <th>Mattar MRT station</th>\n",
       "      <th>Ubi MRT station</th>\n",
       "      <th>Kaki Bukit MRT Station</th>\n",
       "      <th>Bedok North MRT station</th>\n",
       "      <th>Bedok Reservoir MRT station</th>\n",
       "      <th>Tampines West MRT station</th>\n",
       "      <th>Tampines East MRT station</th>\n",
       "      <th>Upper Changi MRT station</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9065</th>\n",
       "      <td>JURONG EAST</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>-0.529814</td>\n",
       "      <td>New Generation</td>\n",
       "      <td>-0.704016</td>\n",
       "      <td>-1.873123</td>\n",
       "      <td>-1.828159</td>\n",
       "      <td>-1.645708</td>\n",
       "      <td>-1.282155</td>\n",
       "      <td>...</td>\n",
       "      <td>0.767859</td>\n",
       "      <td>0.934665</td>\n",
       "      <td>1.071898</td>\n",
       "      <td>1.158303</td>\n",
       "      <td>1.195126</td>\n",
       "      <td>1.199378</td>\n",
       "      <td>1.201120</td>\n",
       "      <td>1.222334</td>\n",
       "      <td>1.235184</td>\n",
       "      <td>1.209621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17943</th>\n",
       "      <td>TAMPINES</td>\n",
       "      <td>EXECUTIVE</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>2.078780</td>\n",
       "      <td>Maisonette</td>\n",
       "      <td>0.212764</td>\n",
       "      <td>1.334571</td>\n",
       "      <td>1.383103</td>\n",
       "      <td>1.412355</td>\n",
       "      <td>1.414998</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.227777</td>\n",
       "      <td>-0.409464</td>\n",
       "      <td>-0.650408</td>\n",
       "      <td>-0.967465</td>\n",
       "      <td>-1.125322</td>\n",
       "      <td>-1.260628</td>\n",
       "      <td>-1.429340</td>\n",
       "      <td>-1.557149</td>\n",
       "      <td>-1.496896</td>\n",
       "      <td>-1.477442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60994</th>\n",
       "      <td>TAMPINES</td>\n",
       "      <td>4 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>0.163094</td>\n",
       "      <td>Model A</td>\n",
       "      <td>0.396120</td>\n",
       "      <td>1.216776</td>\n",
       "      <td>1.266286</td>\n",
       "      <td>1.297672</td>\n",
       "      <td>1.316723</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.412798</td>\n",
       "      <td>-0.583465</td>\n",
       "      <td>-0.810033</td>\n",
       "      <td>-1.109220</td>\n",
       "      <td>-1.258317</td>\n",
       "      <td>-1.382989</td>\n",
       "      <td>-1.500400</td>\n",
       "      <td>-1.548166</td>\n",
       "      <td>-1.394966</td>\n",
       "      <td>-1.409751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116437</th>\n",
       "      <td>QUEENSTOWN</td>\n",
       "      <td>EXECUTIVE</td>\n",
       "      <td>MediumStorey</td>\n",
       "      <td>2.119539</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>0.121086</td>\n",
       "      <td>-0.790610</td>\n",
       "      <td>-0.607493</td>\n",
       "      <td>-0.461233</td>\n",
       "      <td>-0.105308</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.764955</td>\n",
       "      <td>-0.424158</td>\n",
       "      <td>-0.127915</td>\n",
       "      <td>0.105798</td>\n",
       "      <td>0.235245</td>\n",
       "      <td>0.287826</td>\n",
       "      <td>0.353682</td>\n",
       "      <td>0.438843</td>\n",
       "      <td>0.524427</td>\n",
       "      <td>0.435829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18368</th>\n",
       "      <td>TOA PAYOH</td>\n",
       "      <td>3 ROOM</td>\n",
       "      <td>SmallStorey</td>\n",
       "      <td>-1.181962</td>\n",
       "      <td>Improved</td>\n",
       "      <td>-1.804152</td>\n",
       "      <td>-0.218198</td>\n",
       "      <td>-0.206804</td>\n",
       "      <td>-0.181690</td>\n",
       "      <td>-0.020512</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.545522</td>\n",
       "      <td>-1.410569</td>\n",
       "      <td>-1.146264</td>\n",
       "      <td>-0.807334</td>\n",
       "      <td>-0.653998</td>\n",
       "      <td>-0.541421</td>\n",
       "      <td>-0.411717</td>\n",
       "      <td>-0.342340</td>\n",
       "      <td>-0.240809</td>\n",
       "      <td>-0.272851</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 125 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               town  flat_type  storey_range  floor_area_sqm      flat_model  \\\n",
       "9065    JURONG EAST     3 ROOM   SmallStorey       -0.529814  New Generation   \n",
       "17943      TAMPINES  EXECUTIVE   SmallStorey        2.078780      Maisonette   \n",
       "60994      TAMPINES     4 ROOM   SmallStorey        0.163094         Model A   \n",
       "116437   QUEENSTOWN  EXECUTIVE  MediumStorey        2.119539       Apartment   \n",
       "18368     TOA PAYOH     3 ROOM   SmallStorey       -1.181962        Improved   \n",
       "\n",
       "        remaining_lease  Jurong East MRT station  Bukit Batok MRT station  \\\n",
       "9065          -0.704016                -1.873123                -1.828159   \n",
       "17943          0.212764                 1.334571                 1.383103   \n",
       "60994          0.396120                 1.216776                 1.266286   \n",
       "116437         0.121086                -0.790610                -0.607493   \n",
       "18368         -1.804152                -0.218198                -0.206804   \n",
       "\n",
       "        Bukit Gombak MRT station  Choa Chu Kang MRT station  ...  \\\n",
       "9065                   -1.645708                  -1.282155  ...   \n",
       "17943                   1.412355                   1.414998  ...   \n",
       "60994                   1.297672                   1.316723  ...   \n",
       "116437                 -0.461233                  -0.105308  ...   \n",
       "18368                  -0.181690                  -0.020512  ...   \n",
       "\n",
       "        Bendemeer MRT station  Geylang Bahru MRT Station  Mattar MRT station  \\\n",
       "9065                 0.767859                   0.934665            1.071898   \n",
       "17943               -0.227777                  -0.409464           -0.650408   \n",
       "60994               -0.412798                  -0.583465           -0.810033   \n",
       "116437              -0.764955                  -0.424158           -0.127915   \n",
       "18368               -1.545522                  -1.410569           -1.146264   \n",
       "\n",
       "        Ubi MRT station  Kaki Bukit MRT Station  Bedok North MRT station  \\\n",
       "9065           1.158303                1.195126                 1.199378   \n",
       "17943         -0.967465               -1.125322                -1.260628   \n",
       "60994         -1.109220               -1.258317                -1.382989   \n",
       "116437         0.105798                0.235245                 0.287826   \n",
       "18368         -0.807334               -0.653998                -0.541421   \n",
       "\n",
       "        Bedok Reservoir MRT station  Tampines West MRT station  \\\n",
       "9065                       1.201120                   1.222334   \n",
       "17943                     -1.429340                  -1.557149   \n",
       "60994                     -1.500400                  -1.548166   \n",
       "116437                     0.353682                   0.438843   \n",
       "18368                     -0.411717                  -0.342340   \n",
       "\n",
       "        Tampines East MRT station  Upper Changi MRT station  \n",
       "9065                     1.235184                  1.209621  \n",
       "17943                   -1.496896                 -1.477442  \n",
       "60994                   -1.394966                 -1.409751  \n",
       "116437                   0.524427                  0.435829  \n",
       "18368                   -0.240809                 -0.272851  \n",
       "\n",
       "[5 rows x 125 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(97547, 125)\n",
      "(24387, 125)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FLAT TYPE  7\n",
      "STOREY RANGE  3\n",
      "FLAT MODEL  20\n"
     ]
    }
   ],
   "source": [
    "print(\"FLAT TYPE \",len(X_train.flat_type.unique()))\n",
    "print(\"STOREY RANGE \",len(X_train.storey_range.unique()))\n",
    "print(\"FLAT MODEL \",len(X_train.flat_model.unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FLAT TYPE  7\n",
      "STOREY RANGE  3\n",
      "FLAT MODEL  19\n"
     ]
    }
   ],
   "source": [
    "print(\"FLAT TYPE \",len(X_test.flat_type.unique()))\n",
    "print(\"STOREY RANGE \",len(X_test.storey_range.unique()))\n",
    "print(\"FLAT MODEL \",len(X_test.flat_model.unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = pd.get_dummies(X_train,columns=cat_Attributes,drop_first=True)\n",
    "X_test = pd.get_dummies(X_test,columns=cat_unseenAttribute,drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(97547, 173)\n",
      "(24387, 172)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['town', 'flat_type', 'storey_range', 'flat_model'], dtype='object')\n",
      "Index(['town', 'flat_type', 'storey_range', 'flat_model'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print((cat_Attributes))\n",
    "print((cat_unseenAttribute))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get missing columns in the training test\n",
    "missing_cols = set( X_train.columns ) - set( X_test.columns )\n",
    "# Add a missing column in test set with default value equal to 0\n",
    "for c in missing_cols:\n",
    "    X_test[c] = 0\n",
    "# Ensure the order of column in the test set is in the same order than in train set\n",
    "X_test = X_test[X_train.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(97547, 173)\n",
      "(24387, 173)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying PCA for Dimensionality reduction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA \n",
    "from matplotlib.pyplot import figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca = PCA().fit(X_train)\n",
    "#Plotting the Cumulative Summation of the Explained Variance\n",
    "plt.figure(figsize=(10,8))\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.xlabel('Number of Components')\n",
    "plt.ylabel('Variance (%)') #for each component\n",
    "plt.title('Attribute components influencing resale value')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(n_components = 7) \n",
    "X_train_PCA = pca.fit_transform(X_train) \n",
    "X_test_PCA = pca.transform(X_test)\n",
    "explained_variance = pca.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Building:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm = linear_model.LinearRegression()\n",
    "lm.fit(X_train_PCA,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainPred = lm.predict(X_train_PCA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "testPred = lm.predict(X_test_PCA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mean_absolute_percentage_error(y_true, y_pred): \n",
    "    y_true, y_pred = np.array(y_true), np.array(y_pred)\n",
    "    return (np.mean(np.abs((y_true - y_pred) / y_true)) * 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_absolute_percentage_error TRAIN 12.097927860620935\n",
      "mean_absolute_percentage_error TEST 12.093310091137361\n"
     ]
    }
   ],
   "source": [
    "print(\"mean_absolute_percentage_error TRAIN\",mean_absolute_percentage_error(Y_train,trainPred))\n",
    "print(\"mean_absolute_percentage_error TEST\",mean_absolute_percentage_error(Y_test,testPred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decission Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor = DecisionTreeRegressor(criterion='mse',max_depth=50,random_state=123,min_samples_leaf=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=50,\n",
       "                      max_features=None, max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=10, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                      random_state=123, splitter='best')"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.fit(X_train_PCA,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainPred_DT = regressor.predict(X_train_PCA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "testPred_DT = regressor.predict(X_test_PCA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_absolute_percentage_error TRAIN 4.1028768458179865\n",
      "mean_absolute_percentage_error TEST 5.4156852405103155\n"
     ]
    }
   ],
   "source": [
    "print(\"mean_absolute_percentage_error TRAIN\",mean_absolute_percentage_error(Y_train,trainPred_DT))\n",
    "print(\"mean_absolute_percentage_error TEST\",mean_absolute_percentage_error(Y_test,testPred_DT))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check without PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=50,\n",
       "                      max_features=None, max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=10, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                      random_state=123, splitter='best')"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainPred_DT_W = regressor.predict(X_train)\n",
    "testPred_DT_W = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_absolute_percentage_error TRAIN 4.06113667916808\n",
      "mean_absolute_percentage_error TEST 5.079095503119349\n"
     ]
    }
   ],
   "source": [
    "print(\"mean_absolute_percentage_error TRAIN\",mean_absolute_percentage_error(Y_train,trainPred_DT_W))\n",
    "print(\"mean_absolute_percentage_error TEST\",mean_absolute_percentage_error(Y_test,testPred_DT_W))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
